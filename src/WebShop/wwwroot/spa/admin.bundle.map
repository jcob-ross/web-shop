{"version":3,"file":"admin.bundle.js","sources":["webpack:///./Client/admin_entry.ts","webpack:///./Client/components/shared/index.ts","webpack:///./Client/components/admin/products/shared/index.ts","webpack:///./Client/components/admin/index.ts","webpack:///./Client/components/admin/admin.component.ts","webpack:///./Client/components/admin/admin.routes.ts","webpack:///./Client/components/admin/categories/categories.component.ts","webpack:///./Client/components/admin/categories/index.ts","webpack:///./Client/components/admin/manufacruters/index.ts","webpack:///./Client/components/admin/manufacruters/manufacturers.component.ts","webpack:///./Client/components/admin/orders/index.ts","webpack:///./Client/components/admin/orders/orders.component.ts","webpack:///./Client/components/admin/products/edit-details/edit-details.component.ts","webpack:///./Client/components/admin/products/edit-details/index.ts","webpack:///./Client/components/admin/products/edit-details/textarea-auto-adjust.directive.ts","webpack:///./Client/components/admin/products/edit-product/edit-product.component.ts","webpack:///./Client/components/admin/products/edit-product/index.ts","webpack:///./Client/components/admin/products/edit-tags/edit-tags.component.ts","webpack:///./Client/components/admin/products/edit-tags/index.ts","webpack:///./Client/components/admin/products/index.ts","webpack:///./Client/components/admin/products/product-search/index.ts","webpack:///./Client/components/admin/products/product-search/product-search.component.ts","webpack:///./Client/components/admin/products/products.component.ts","webpack:///./Client/components/admin/products/shared/ProductEditorState.ts","webpack:///./Client/components/admin/tags/index.ts","webpack:///./Client/components/admin/tags/tags.component.ts","webpack:///./Client/components/shared/api/api.service.ts","webpack:///./Client/components/shared/api/index.ts","webpack:///./Client/components/shared/models/Category.ts","webpack:///./Client/components/shared/models/Manufacturer.ts","webpack:///./Client/components/shared/models/Product.ts","webpack:///./Client/components/shared/models/ProductDetail.ts","webpack:///./Client/components/shared/models/Tag.ts","webpack:///./Client/components/shared/models/index.ts","webpack:///./Client/components/admin/admin.component.html","webpack:///./Client/components/admin/categories/categories.component.html","webpack:///./Client/components/admin/manufacruters/manufacturers.component.html","webpack:///./Client/components/admin/orders/orders.component.html","webpack:///./Client/components/admin/products/edit-details/edit-details.component.html","webpack:///./Client/components/admin/products/edit-product/edit-product.component.html","webpack:///./Client/components/admin/products/edit-tags/edit-tags.component.html","webpack:///./Client/components/admin/products/product-search/product-search.component.html","webpack:///./Client/components/admin/products/products.component.html","webpack:///./Client/components/admin/tags/tags.component.html","webpack:///./~/rxjs/add/Observable/throw.js","webpack:///./~/rxjs/observable/ErrorObservable.js","webpack:///./~/rxjs/observable/throw.js"],"sourcesContent":["import 'ts-helpers';\r\n\r\nimport { bootstrap } from '@angular/platform-browser-dynamic';\r\nimport { enableDebugTools, disableDebugTools } from '@angular/platform-browser';\r\nimport { enableProdMode, Type, provide } from '@angular/core';\r\nimport { HTTP_PROVIDERS } from '@angular/http';\r\nimport { LocationStrategy, PathLocationStrategy, HashLocationStrategy } from '@angular/common';\r\nimport { disableDeprecatedForms, provideForms } from '@angular/forms';\r\n\r\nimport { AdminComponent } from './components/admin';\r\nimport { ADMIN_ROUTER_PROVIDERS, ProductAvailableGuard } from './components/admin';\r\nimport { ApiService } from './components/shared';\r\nimport { ProductEditorState } from './components/admin/products/shared';\r\n\r\ndeclare var ENV: any; // webpack DefinePlugin\r\nif ('production' === ENV) {\r\n  disableDebugTools();\r\n  enableProdMode();\r\n} else {\r\n}\r\n\r\nbootstrap(<Type>AdminComponent, [\r\n  disableDeprecatedForms(),\r\n  provideForms(),\r\n\r\n  ...ADMIN_ROUTER_PROVIDERS,\r\n  ...HTTP_PROVIDERS,\r\n  ApiService,\r\n  ProductEditorState,\r\n  ProductAvailableGuard,\r\n  { provide: LocationStrategy, useClass: HashLocationStrategy }\r\n]).catch((error: Error) => console.error(`admin-main: ${error}`));\r\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/admin_entry.ts\n **/","export * from './api';\r\nexport * from './models';\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/shared/index.ts\n **/","export * from './ProductEditorState';\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/admin/products/shared/index.ts\n **/","export * from './admin.component';\r\nexport * from './admin.routes';\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/admin/index.ts\n **/","import { Component } from '@angular/core';\r\nimport { ROUTER_DIRECTIVES } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'admin-main',\r\n  template: require('./admin.component.html'),\r\n  directives: [ ROUTER_DIRECTIVES ]\r\n})\r\nexport class AdminComponent {\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/admin/admin.component.ts\n **/","import {\r\n  Router,\r\n  RouterConfig,\r\n  provideRouter,\r\n  CanActivate,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot\r\n} from '@angular/router';\r\nimport { Injectable } from  '@angular/core';\r\nimport { CategoriesComponent } from './categories';\r\nimport { ManufacturersComponent } from './manufacruters';\r\nimport { TagsComponent } from './tags';\r\nimport { OrdersComponent } from './orders';\r\nimport {\r\n  ProductsComponent,\r\n  EditDetailsComponent,\r\n  ProductSearchComponent,\r\n  EditProductComponent,\r\n  EditTagsComponent\r\n} from './products';\r\n\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { ProductEditorState } from './products/shared';\r\n\r\n@Injectable()\r\nexport class ProductAvailableGuard implements CanActivate {\r\n  constructor(private editorState: ProductEditorState, private router: Router) {\r\n  }\r\n\r\n  canActivate(): Observable<boolean> | boolean {\r\n    if (this.editorState.hasProduct && !this.editorState.isNewProduct) {\r\n      return true;\r\n    }\r\n    this.router.navigate(['/products/search']);\r\n    return false;\r\n  }\r\n\r\n}\r\n\r\nexport const routes: RouterConfig = <RouterConfig>[\r\n  { path: 'categories', component: CategoriesComponent },\r\n  { path: 'manufacturers', component: ManufacturersComponent },\r\n  { path: 'tags', component: TagsComponent },\r\n  { path: 'orders', component: OrdersComponent },\r\n  {\r\n    path: 'products', component: ProductsComponent,\r\n    children: [\r\n      { path: '', redirectTo: 'search', pathMatch: 'full' },\r\n      { path: 'search', component: ProductSearchComponent },\r\n      { path: 'edit', component: EditProductComponent },\r\n      { path: 'tags', component: EditTagsComponent, canActivate: [ProductAvailableGuard] },\r\n      { path: 'detail', component: EditDetailsComponent, canActivate: [ProductAvailableGuard] }\r\n    ]\r\n  },\r\n\r\n  {path: '', redirectTo: 'products/search', pathMatch: 'full'}\r\n];\r\n\r\nexport const ADMIN_ROUTER_PROVIDERS = [provideRouter(routes)];\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/admin/admin.routes.ts\n **/","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators, FormControl, REACTIVE_FORM_DIRECTIVES } from '@angular/forms';\r\nimport { Response } from '@angular/http';\r\n\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\nimport { ApiService, Category } from '../../shared';\r\n\r\n@Component({\r\n  selector: 'j-categories',\r\n  template: require('./categories.component.html'),\r\n  directives: [ REACTIVE_FORM_DIRECTIVES ]\r\n})\r\nexport class CategoriesComponent implements OnInit, OnDestroy {\r\n  private sub: Subscription;\r\n  errors: string[];\r\n\r\n  categories: Category[];\r\n  selectedCategory: Category;\r\n\r\n  form: FormGroup;\r\n\r\n  id: FormControl;\r\n  name: FormControl;\r\n  urlSegment: FormControl;\r\n  imageUrl: FormControl;\r\n  viewDisplayOrder: FormControl;\r\n\r\n\r\n  constructor(private api: ApiService, private fb: FormBuilder) {\r\n  }\r\n\r\n  onCategoryClick(category: Category) {\r\n    this.selectedCategory = category;\r\n\r\n    this.id = new FormControl(-1);\r\n    this.name = new FormControl('', Validators.required);\r\n    this.urlSegment = new FormControl('', Validators.required);\r\n    this.imageUrl = new FormControl('', Validators.required);\r\n    this.viewDisplayOrder = new FormControl('', Validators.compose([Validators.required, Validators.pattern('[-]?[0-9]+')]));\r\n\r\n    if (category !== null && typeof category !== 'undefined') {\r\n      this.id.updateValue(category.id);\r\n      this.name.updateValue(category.name);\r\n      this.urlSegment.updateValue(category.urlSegment);\r\n      this.imageUrl.updateValue(category.imageUrl);\r\n      this.viewDisplayOrder.updateValue(category.viewDisplayOrder);\r\n    }\r\n\r\n    this.form = this.fb.group({\r\n      'id': this.id,\r\n      'name': this.name,\r\n      'urlSegment': this.urlSegment,\r\n      'imageUrl': this.imageUrl,\r\n      'viewDisplayOrder': this.viewDisplayOrder\r\n    });\r\n  }\r\n\r\n  onFormSubmit(formValue) {\r\n    if (formValue.id >=0) {\r\n      this.api.updateCategory(formValue).subscribe((res: any) => {\r\n        if (res.ok) {\r\n          let updatedCategory: Category = res.json();\r\n          let categoryIndex = this.categories.findIndex(c => c.id === updatedCategory.id);\r\n          this.categories[categoryIndex] = updatedCategory;\r\n          this.onCategoryClick(this.categories[categoryIndex]);\r\n        }\r\n      }, (err: any) => this.addErrors(err));\r\n    } else {\r\n      this.api.createCategory(formValue).subscribe((res: Response) => {\r\n        if (res.ok) {\r\n          this.categories.push(res.json());\r\n          this.onCategoryClick(this.categories[this.categories.length - 1]);\r\n        }\r\n      }, (err: any) => this.addErrors(err));\r\n    }\r\n  }\r\n\r\n  onDeleteClick(id: number) {\r\n    this.api.deleteCategory(id).subscribe((res: Response) => {\r\n      if (res.ok) {\r\n        this.categories.splice(this.categories.findIndex(c => c.id === id), 1);\r\n        this.selectedCategory = null;\r\n        this.form = null;\r\n      }\r\n      console.log(res);\r\n    }, (err: any) => this.addErrors(err));\r\n  }\r\n\r\n\r\n  addErrors(errorResponse) {\r\n    this.errors = [];\r\n    console.warn(errorResponse);\r\n    for (let prop in errorResponse) {\r\n      if (errorResponse.hasOwnProperty(prop)) {\r\n        this.errors.push(errorResponse[prop]);\r\n      }\r\n    }\r\n  }\r\n\r\n  clearErrors(index: number) {\r\n    if (typeof index === 'undefined') {\r\n      this.errors = [];\r\n    } else {\r\n      this.errors.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.sub = this.api.getCategories(/* include manufacturers */false, /* include tags */false)\r\n      .subscribe((res: Response) => {\r\n        this.categories = res.json();\r\n      }, (err: any) => {\r\n        this.addErrors(err);\r\n      });\r\n  }\r\n  \r\n  ngOnDestroy() {\r\n    this.sub.unsubscribe();\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/admin/categories/categories.component.ts\n **/","export * from './categories.component';\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/admin/categories/index.ts\n **/","export * from './manufacturers.component';\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/admin/manufacruters/index.ts\n **/","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators, FormControl, REACTIVE_FORM_DIRECTIVES } from '@angular/forms';\r\n\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\nimport { ApiService, Category, Manufacturer } from '../../shared';\r\n\r\n@Component({\r\n  selector: 'j-manufacturers',\r\n  template: require('./manufacturers.component.html'),\r\n  directives: [ REACTIVE_FORM_DIRECTIVES ]\r\n})\r\nexport class ManufacturersComponent implements OnInit, OnDestroy {\r\n  private sub: Subscription;\r\n  errors: string[];\r\n\r\n  categories: Category[] = null;\r\n  selectedCategory: Category = null;\r\n  selectedManufacturer: Manufacturer = null;\r\n\r\n  form: FormGroup;\r\n\r\n  id: FormControl;\r\n  name: FormControl;\r\n  urlSegment: FormControl;\r\n  showInMainMenu: FormControl;\r\n  parentCategoryId: FormControl;\r\n\r\n  constructor(private api: ApiService, private fb: FormBuilder) {\r\n  }\r\n\r\n  onManufacturerClick(category: Category, manufacturer: Manufacturer) {\r\n    this.selectedManufacturer = manufacturer;\r\n    this.selectedCategory = category;\r\n\r\n    this.id = new FormControl(-1);\r\n    this.name = new FormControl('', Validators.required);\r\n    this.urlSegment = new FormControl('', Validators.required);\r\n    this.showInMainMenu = new FormControl(false, Validators.required);\r\n    this.parentCategoryId = new FormControl(category.id, Validators.required);\r\n\r\n    if (manufacturer !== null && typeof manufacturer !== 'undefined') {\r\n      this.id.updateValue(manufacturer.id);\r\n      this.name.updateValue(manufacturer.name);\r\n      this.urlSegment.updateValue(manufacturer.urlSegment);\r\n      this.showInMainMenu.updateValue(manufacturer.showInMainMenu);\r\n      this.parentCategoryId.updateValue(manufacturer.parentCategoryId);\r\n    }\r\n\r\n    this.form = this.fb.group({\r\n      'id': this.id,\r\n      'name': this.name,\r\n      'urlSegment': this.urlSegment,\r\n      'showInMainMenu': this.showInMainMenu,\r\n      'parentCategoryId': this.parentCategoryId,\r\n    });\r\n  }\r\n\r\n  onCategoryClick(category: Category) {\r\n    this.onManufacturerClick(category, null);\r\n  }\r\n\r\n  onFormSubmit(formValue) {\r\n    if (formValue.id >= 0) {\r\n      this.api.updateManufacturer(formValue).subscribe((res: any) => {\r\n        if (res.ok) {\r\n          let updatedManufacturer: Manufacturer = res.json();\r\n          let category = this.categories.find(c => c.id === updatedManufacturer.parentCategoryId);\r\n          let manufacturerIndex = category.manufacturers.findIndex(m => m.id === updatedManufacturer.id);\r\n          category.manufacturers[manufacturerIndex] = updatedManufacturer;\r\n          this.onManufacturerClick(this.selectedCategory, updatedManufacturer);\r\n        }\r\n      }, (err: any) => this.addErrors(err));\r\n    } else {\r\n      this.api.createManufacturer(formValue).subscribe((res: any) => {\r\n        if (res.ok) {\r\n          let createdManufacturer: Manufacturer = res.json();\r\n          let category = this.categories.find(c => c.id === createdManufacturer.parentCategoryId);\r\n          category.manufacturers.push(createdManufacturer);\r\n          this.onManufacturerClick(this.selectedCategory, createdManufacturer);\r\n        }\r\n      }, (err: any) => this.addErrors(err));\r\n    }\r\n  }\r\n\r\n  onDeleteClick(id: number) {\r\n    this.api.deleteManufacturer(id).subscribe((res: any) => {\r\n      if (res.ok) {\r\n        let idx = this.selectedCategory.manufacturers.findIndex(m => m.id === id);\r\n        this.selectedCategory.manufacturers.splice(idx, 1);\r\n        this.selectedCategory = null;\r\n        this.selectedManufacturer = null;\r\n        this.form = null;\r\n      }\r\n    }, (err: any) => this.addErrors(err));\r\n  }\r\n\r\n  addErrors(errorResponse) {\r\n    this.errors = [];\r\n    console.warn(errorResponse);\r\n    for (let prop in errorResponse) {\r\n      if (errorResponse.hasOwnProperty(prop)) {\r\n        this.errors.push(errorResponse[prop]);\r\n      }\r\n    }\r\n  }\r\n\r\n  clearErrors(index: number) {\r\n    if (typeof index === 'undefined') {\r\n      this.errors = [];\r\n    } else {\r\n      this.errors.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.sub = this.api.getCategories(/* include manufacturers */true, /* include tags */false)\r\n      .map(res => res.json())\r\n      .subscribe(res => {\r\n        this.categories = res;\r\n      });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.sub.unsubscribe();\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/admin/manufacruters/manufacturers.component.ts\n **/","export * from './orders.component';\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/admin/orders/index.ts\n **/","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'j-orders',\r\n  template: require('./orders.component.html')\r\n})\r\nexport class OrdersComponent {\r\n\r\n}\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/admin/orders/orders.component.ts\n **/","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { DomSanitizationService } from '@angular/platform-browser';\r\nimport { FormBuilder, FormGroup, Validators, FormControl, REACTIVE_FORM_DIRECTIVES } from '@angular/forms';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\nimport { ApiService, Product, ProductDetail } from '../../../shared';\r\nimport { ProductEditorState } from '../shared';\r\nimport { AutoAdjustTextareaDirective } from './textarea-auto-adjust.directive';\r\n\r\n@Component({\r\n  selector: 'j-details',\r\n  template: require('./edit-details.component.html'),\r\n  directives: [ REACTIVE_FORM_DIRECTIVES, AutoAdjustTextareaDirective ]\r\n})\r\nexport class EditDetailsComponent implements OnInit, OnDestroy {\r\n  private detailSub: Subscription;\r\n  private createSub: Subscription;\r\n  private updateSub: Subscription;\r\n\r\n  product: Product;\r\n  productDetail: ProductDetail;\r\n\r\n  // validation helper form view\r\n  markupMaxLength: number = 30000;\r\n\r\n  form: FormGroup;\r\n\r\n  id: FormControl;\r\n  markup: FormControl;\r\n  parentProductId: FormControl;\r\n\r\n  constructor(\r\n    private api: ApiService,\r\n    private fb: FormBuilder,\r\n    private editorState: ProductEditorState,\r\n    private sanitizer: DomSanitizationService) {\r\n  }\r\n\r\n  onSubmit(formValue) {\r\n    if (this.id.value > 0) { // updating existing detail\r\n      this.api.updateProductDetail(this.parentProductId.value, formValue)\r\n        .subscribe((res: any) => {\r\n          let detail = res.json();\r\n          this.createForm(detail);\r\n        })\r\n    } else { // creating new detail\r\n      this.api.createProductDetail(this.parentProductId.value, formValue)\r\n        .subscribe((res: any) => {\r\n          let detail = res.json();\r\n          this.createForm(detail);\r\n        });\r\n    }\r\n  }\r\n\r\n  preview = null;\r\n  onPreviewClick(formValue: ProductDetail) {\r\n    this.api.getMarkdownPreview(formValue)\r\n      .subscribe((res: any) => {\r\n        let markup = res.json().markup;\r\n        this.preview = this.sanitizer.bypassSecurityTrustHtml(markup);\r\n      }, (err: any) => console.log(err));\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.product = this.editorState.currentProduct;\r\n    this.detailSub = this.api.getProductDetail(this.product.id)\r\n      .subscribe((res: any) => {\r\n        let detail = res.json();\r\n        this.createForm(detail);\r\n      }, (err: any) => {\r\n        this.createForm();\r\n      });\r\n  }\r\n\r\n\r\n  ngOnDestroy() {\r\n    if (this.detailSub && this.detailSub.unsubscribe) {\r\n      this.detailSub.unsubscribe();\r\n    }\r\n    if (this.createSub && this.createSub.unsubscribe) {\r\n      this.createSub.unsubscribe();\r\n    }\r\n    if (this.updateSub && this.updateSub.unsubscribe) {\r\n      this.updateSub.unsubscribe();\r\n    }\r\n  }\r\n\r\n  private createForm(productDetail?: ProductDetail) {\r\n    this.productDetail = null;\r\n    this.id = new FormControl(-1);\r\n    this.markup = new FormControl('', Validators.maxLength(this.markupMaxLength));\r\n    this.parentProductId = new FormControl(this.product.id);\r\n\r\n    if (productDetail !== null && typeof productDetail !== 'undefined') {\r\n      this.productDetail = productDetail;\r\n      this.id.updateValue(productDetail.id);\r\n      this.markup.updateValue(productDetail.markup);\r\n      this.parentProductId.updateValue(productDetail.parentProductId);\r\n    }\r\n\r\n    this.form = this.fb.group({\r\n      'id': this.id,\r\n      'markup': this.markup,\r\n      'parentProductId': this.parentProductId\r\n    });\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/admin/products/edit-details/edit-details.component.ts\n **/","export * from './edit-details.component';\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/admin/products/edit-details/index.ts\n **/","import { ElementRef, HostListener, Directive} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: 'textarea[auto-adjust]'\r\n})\r\nexport class AutoAdjustTextareaDirective {\r\n  @HostListener('input',['$event.target'])\r\n  onInput(textArea: HTMLTextAreaElement): void {\r\n    this.adjust();\r\n  }\r\n  constructor(public element: ElementRef){\r\n  }\r\n\r\n  ngOnInit(): void{\r\n    this.adjust();\r\n  }\r\n\r\n  private adjust(): void{\r\n    this.element.nativeElement.style.overflow = 'hidden';\r\n    this.element.nativeElement.style.height = 'auto';\r\n    this.element.nativeElement.style.height = this.element.nativeElement.scrollHeight + \"px\";\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/admin/products/edit-details/textarea-auto-adjust.directive.ts\n **/","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators, FormControl, REACTIVE_FORM_DIRECTIVES } from '@angular/forms';\r\n\r\nimport { ApiService, Product, Tag, Category, Manufacturer } from '../../../shared';\r\nimport { ProductEditorState } from '../shared';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\nconst fieldRules = {\r\n  name: { minLength: 3, maxLength: 100 },\r\n  description: { minLength: 3, maxLength: 200 },\r\n  imageUrl: { maxLength: 2500 }\r\n};\r\n\r\nfunction categoryValidator(control: FormControl): {[n: number]: boolean} {\r\n  if (control.value < 0) {\r\n    return {invalidCategory: true};\r\n  }\r\n}\r\n\r\nfunction manufacturerValidator(control: FormControl): {[n: number]: boolean} {\r\n  if (control.value < 0) {\r\n    return {invalidManufacturer: true};\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'j-edit-product',\r\n  template: require('./edit-product.component.html'),\r\n  directives: [ REACTIVE_FORM_DIRECTIVES ]\r\n})\r\nexport class EditProductComponent implements OnInit, OnDestroy {\r\n  errors: string[];\r\n  categories: Category[];\r\n  manufacturers: Manufacturer[];\r\n  productSub: Subscription;\r\n  categoriesSub: Subscription;\r\n  showConfirmDelete: boolean = false;\r\n\r\n  product: Product;\r\n\r\n  // view helper for error messages\r\n  fieldRules = fieldRules;\r\n\r\n  form: FormGroup;\r\n\r\n  id: FormControl;\r\n  name: FormControl;\r\n  description: FormControl;\r\n  stockCount: FormControl;\r\n  price: FormControl;\r\n  currentPrice: FormControl;\r\n  productNumber: FormControl;\r\n  imageUrl: FormControl;\r\n  newProduct: FormControl;\r\n  promoActive: FormControl;\r\n  manufacturerId: FormControl;\r\n  parentCategoryId: FormControl;\r\n\r\n  constructor(\r\n    private api: ApiService,\r\n    private fb: FormBuilder,\r\n    private editorState: ProductEditorState) {\r\n  }\r\n\r\n  private createForm(product?: Product) {\r\n    this.product = null;\r\n    this.id = new FormControl(-1);\r\n    this.name = new FormControl('', Validators.compose([\r\n      Validators.required,\r\n      Validators.minLength(fieldRules.name.minLength),\r\n      Validators.maxLength(fieldRules.name.maxLength)\r\n    ]));\r\n    this.description = new FormControl('', Validators.compose([\r\n      Validators.required,\r\n      Validators.minLength(fieldRules.description.minLength),\r\n      Validators.maxLength(fieldRules.description.maxLength)\r\n    ]));\r\n    this.stockCount = new FormControl(0, Validators.compose([Validators.required, Validators.pattern('[0-9]+')]));\r\n    this.price = new FormControl(0, Validators.compose([Validators.required, Validators.pattern('[0-9]+')]));\r\n    this.currentPrice = new FormControl(0, Validators.compose([Validators.required, Validators.pattern('[0-9]+')]));\r\n    this.productNumber = new FormControl('will be assigned');\r\n    this.imageUrl = new FormControl('', Validators.compose([\r\n      Validators.required,\r\n      Validators.maxLength(fieldRules.imageUrl.maxLength),\r\n    ]));\r\n    this.newProduct = new FormControl(false, Validators.required);\r\n    this.promoActive = new FormControl(false, Validators.required);\r\n    this.manufacturerId = new FormControl(-1, Validators.compose([Validators.required, manufacturerValidator]));\r\n    this.parentCategoryId = new FormControl(-1, Validators.compose([Validators.required, categoryValidator]));\r\n\r\n    if (product !== null && typeof product !== 'undefined') {\r\n      this.product = product;\r\n      this.id.updateValue(product.id);\r\n      this.name.updateValue(product.name);\r\n      this.description.updateValue(product.description);\r\n      this.stockCount.updateValue(product.stockCount);\r\n      this.price.updateValue(product.price);\r\n      this.currentPrice.updateValue(product.currentPrice);\r\n      this.productNumber.updateValue(product.productNumber);\r\n      this.imageUrl.updateValue(product.imageUrl);\r\n      this.newProduct.updateValue(product.newProduct);\r\n      this.promoActive.updateValue(product.promoActive);\r\n      this.manufacturerId.updateValue(product.manufacturerId);\r\n      this.parentCategoryId.updateValue(product.parentCategoryId);\r\n    }\r\n\r\n    this.form = this.fb.group({\r\n      'id': this.id,\r\n      'name': this.name,\r\n      'description': this.description,\r\n      'stockCount': this.stockCount,\r\n      'price': this.price,\r\n      'currentPrice': this.currentPrice,\r\n      'productNumber': this.productNumber,\r\n      'imageUrl': this.imageUrl,\r\n      'newProduct': this.newProduct,\r\n      'promoActive': this.promoActive,\r\n      'manufacturerId': this.manufacturerId,\r\n      'parentCategoryId': this.parentCategoryId\r\n    });\r\n  }\r\n\r\n  onFormSubmit(formValue: Product) {\r\n    let id = this.id.value;\r\n    if (id > 0) { \r\n      // updating product\r\n      this.api.updateProduct(formValue)\r\n        .subscribe((res: any) => {\r\n          let prod = res.json();          \r\n          this.editorState.currentProduct = prod;\r\n          let updatedProductIndex = this.editorState.searchResult.findIndex(p => p.id === id);\r\n          this.editorState.searchResult.splice(updatedProductIndex, 1, prod);\r\n        }, (err: any) => this.addErrors(err));\r\n\r\n    } else { \r\n      // creating product\r\n      this.api.createProduct(formValue)\r\n        .subscribe((res: any) => {\r\n          let prod = res.json();\r\n          this.editorState.currentProduct = prod;\r\n          this.createForm(prod)\r\n        }, (err) => {\r\n          this.addErrors(err);\r\n        });\r\n    }\r\n  }\r\n\r\n  onDeleteClick(id: number) {\r\n    this.showConfirmDelete = true;    \r\n  }\r\n\r\n  onConfirmOk() {\r\n    this.showConfirmDelete = false;\r\n    let id = this.id.value;\r\n    this.api.deleteProduct(id)\r\n      .subscribe((res: any) => {        \r\n        this.onClearFormClick();\r\n        let deletedProductIndex = this.editorState.searchResult.findIndex(p => p.id === id);\r\n        this.editorState.searchResult.splice(deletedProductIndex, 1);\r\n      }, (err: any) => this.addErrors(err));\r\n  }\r\n\r\n  onConfirmCancel() {\r\n    this.showConfirmDelete = false;    \r\n  }\r\n\r\n  onCategorySelect(category: Category) {\r\n    this.parentCategoryId.updateValue(category.id);\r\n    this.manufacturers = category.manufacturers;\r\n    this.manufacturerId.updateValue(-1);\r\n  }\r\n\r\n  onManufacturerSelect(man: Manufacturer) {\r\n    this.manufacturerId.updateValue(man.id);\r\n  }\r\n\r\n  onClearFormClick() {\r\n    this.editorState.clearCurrentProduct();\r\n    this.createForm();\r\n    this.fetchCategories();\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (! this.editorState.hasProduct) {\r\n      this.createForm();\r\n      this.fetchCategories();\r\n    } else {\r\n      let product = this.editorState.currentProduct;\r\n      this.createForm(product);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.productSub && this.productSub.unsubscribe) {\r\n      this.productSub.unsubscribe();\r\n    }\r\n    if (this.categoriesSub && this.categoriesSub.unsubscribe) {\r\n      this.categoriesSub.unsubscribe();\r\n    }\r\n  }\r\n\r\n  private fetchCategories() {\r\n    this.api.getCategories(/*include manufacturers*/true, /*include tags*/false)\r\n      .subscribe((res: any) => {\r\n        this.categories = res.json();\r\n        this.manufacturers = [];\r\n      }, (err: any) => {\r\n        return this.addErrors(err);\r\n      });\r\n  }\r\n\r\n  private addErrors(errorResponse: any) {\r\n    this.errors = [];\r\n    if (errorResponse.constructor === Array) {\r\n      this.errors = errorResponse;\r\n      return;\r\n    }\r\n\r\n    for (let prop in errorResponse) {\r\n      if (errorResponse.hasOwnProperty(prop)) {\r\n        this.errors.push(errorResponse[prop]);\r\n      }\r\n    }\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/admin/products/edit-product/edit-product.component.ts\n **/","export * from './edit-product.component';\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/admin/products/edit-product/index.ts\n **/","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators, FormControl, REACTIVE_FORM_DIRECTIVES } from '@angular/forms';\r\n\r\nimport { ApiService, Product, Tag, Category } from '../../../shared';\r\nimport { ProductEditorState } from '../shared';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\n@Component({\r\n  selector: 'j-tags',\r\n  template: require('./edit-tags.component.html'),\r\n  directives: [ REACTIVE_FORM_DIRECTIVES ]\r\n})\r\nexport class EditTagsComponent implements OnInit, OnDestroy {\r\n  private tagsSub: Subscription;\r\n  errors: string[];\r\n  product: Product;\r\n  availableTags: Tag[];\r\n  assignedTags: Tag[];\r\n\r\n  constructor(private api: ApiService, private editorState: ProductEditorState) {    \r\n  }\r\n  \r\n  ngOnInit() {\r\n    this.product = this.editorState.currentProduct;\r\n    this.assignedTags = this.product.tags;\r\n\r\n    this.tagsSub = this.api.getCategoryTags(this.product.parentCategoryId)\r\n      .subscribe((res: any) => {\r\n        this.availableTags = res.json();\r\n        this.availableTags.map(t => {\r\n          // mark already added tags as added for css\r\n          let currentTag = this.assignedTags.find(at => at.id === t.id);\r\n          if (typeof currentTag !== 'undefined') {\r\n            t.added = true;\r\n          }\r\n          return t;\r\n        });\r\n      }, (err: any) => this.addErrors(err));\r\n  }\r\n  \r\n  ngOnDestroy() {\r\n    this.tagsSub.unsubscribe();\r\n    if (this.addTagSub !== null) {\r\n      this.addTagSub.unsubscribe();\r\n      this.addTagSub = null;\r\n    }\r\n    if (this.removeTagSub !== null) {\r\n      this.removeTagSub.unsubscribe();\r\n      this.removeTagSub = null;\r\n    }\r\n  }\r\n\r\n  addTagSub: Subscription = null;\r\n  addTag(tag: Tag) {\r\n    if (tag.added) {\r\n      return;\r\n    }\r\n    if (this.addTagSub !== null) {\r\n      this.addTagSub.unsubscribe();\r\n    }\r\n    this.addTagSub = this.api.addTagToProduct(this.product.id, tag.id)\r\n      .subscribe((res: any) => {\r\n        tag.added = true;\r\n        this.editorState.currentProduct.tags.push(tag);\r\n        this.product = this.editorState.currentProduct;\r\n      }, (err: any) => this.addErrors(err))\r\n  }\r\n\r\n  removeTagSub: Subscription = null;\r\n  removeTag(tag: Tag) {\r\n    if (this.removeTagSub !== null) {\r\n      this.removeTagSub.unsubscribe();\r\n    }\r\n    this.removeTagSub = this.api.removeTagFromProduct(this.product.id, tag.id)\r\n      .subscribe((res: any) => {\r\n        let tagIndex = this.editorState.currentProduct.tags.findIndex(t => t.id === tag.id);\r\n        let availableTagIndex = this.availableTags.findIndex(t => t.id === tag.id);\r\n        this.availableTags[availableTagIndex].added = false;\r\n        this.editorState.currentProduct.tags.splice(tagIndex, 1);\r\n        this.product = this.editorState.currentProduct;\r\n      }, (err: any) => this.addErrors(err))\r\n  }\r\n\r\n  addErrors(errorResponse) {\r\n    this.errors = [];\r\n    console.warn(errorResponse);\r\n    for (let prop in errorResponse) {\r\n      if (errorResponse.hasOwnProperty(prop)) {\r\n        this.errors.push(errorResponse[prop]);\r\n      }\r\n    }\r\n  }\r\n\r\n  clearErrors(index: number) {\r\n    if (typeof index === 'undefined') {\r\n      this.errors = [];\r\n    } else {\r\n      this.errors.splice(index, 1);\r\n    }\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/admin/products/edit-tags/edit-tags.component.ts\n **/","export * from './edit-tags.component';\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/admin/products/edit-tags/index.ts\n **/","export * from './products.component';\r\nexport * from './edit-details';\r\nexport * from './edit-product';\r\nexport * from './edit-tags';\r\nexport * from './product-search';\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/admin/products/index.ts\n **/","export * from './product-search.component';\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/admin/products/product-search/index.ts\n **/","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { ROUTER_DIRECTIVES, Router } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators, FormControl, REACTIVE_FORM_DIRECTIVES } from '@angular/forms';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport 'rxjs/add/operator/debounceTime';\r\nimport 'rxjs/add/operator/filter';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/distinctUntilChanged';\r\n\r\nimport { ApiService, Product, Category, Tag, Manufacturer } from '../../../shared';\r\nimport { ProductEditorState } from '../shared';\r\n\r\n@Component({\r\n  selector: 'j-search',\r\n  template: require('./product-search.component.html'),\r\n  directives: [ REACTIVE_FORM_DIRECTIVES, ROUTER_DIRECTIVES ]\r\n})\r\nexport class ProductSearchComponent implements OnInit, OnDestroy {\r\n  searchSub: Subscription;\r\n  errors: string[];\r\n  products: Product[];\r\n\r\n  form: FormGroup;\r\n  term: FormControl;\r\n\r\n  constructor(private api: ApiService,\r\n              private fb: FormBuilder,\r\n              private editorState: ProductEditorState,\r\n              private router: Router) {\r\n  }\r\n\r\n  searching: boolean = false;\r\n  maxResults: number = 20;\r\n  maxLength: number = 30;\r\n  minLength: number = 3;\r\n  debounceTimeMs: number = 400;\r\n  private createForm() {\r\n    this.searching = false;\r\n    this.term = new FormControl('', Validators.compose([Validators.minLength(this.minLength), Validators.maxLength(this.maxLength)]));\r\n    this.form = this.fb.group({\r\n      'term': this.term\r\n    });\r\n    this.searchSub = this.term.valueChanges\r\n      .map((term: string) => term.trim())\r\n      .filter(term => term.length >= this.minLength && term.length <= this.maxLength)\r\n      .distinctUntilChanged()\r\n      .do(() => this.searching = true)\r\n      .debounceTime(this.debounceTimeMs)\r\n      .switchMap(term => this.api.searchProducts(term, this.maxResults))\r\n      .do(() => this.searching = false)\r\n      .subscribe((res: any) => {\r\n        this.products = res.json();\r\n      }, (err: any) => this.addErrors(err));\r\n  }\r\n\r\n  onProductClick(product: Product) {\r\n    this.editorState.currentProduct = product;\r\n  }\r\n\r\n  onLinkClick(route: string, product: Product) {\r\n    this.editorState.currentProduct = product;\r\n    this.router.navigateByUrl(route);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.createForm();\r\n    if (this.editorState.searchResult && this.editorState.searchResult.length > 0) {\r\n      this.products = this.editorState.searchResult;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.searchSub.unsubscribe();\r\n    this.editorState.searchResult = this.products;\r\n  }\r\n\r\n  addErrors(errorResponse) {\r\n    this.errors = [];\r\n    console.warn(errorResponse);\r\n    for (let prop in errorResponse) {\r\n      if (errorResponse.hasOwnProperty(prop)) {\r\n        this.errors.push(errorResponse[prop]);\r\n      }\r\n    }\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/admin/products/product-search/product-search.component.ts\n **/","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { ROUTER_DIRECTIVES } from '@angular/router';\r\n\r\nimport { ProductEditorState } from './shared';\r\n\r\n@Component({\r\n  selector: 'j-products',\r\n  template: require('./products.component.html'),\r\n  directives: [ ROUTER_DIRECTIVES ]\r\n})\r\nexport class ProductsComponent implements OnInit {\r\n  constructor(private editorState: ProductEditorState) {\r\n  }\r\n\r\n  get noProductSelected(): boolean {\r\n    return !this.editorState.hasProduct && this.editorState.isNewProduct;\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.editorState.clearCurrentProduct();\r\n    this.editorState.clearSearchResult();\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/admin/products/products.component.ts\n **/","import { Injectable } from '@angular/core';\r\nimport { Product } from '../../../shared';\r\n\r\n@Injectable()\r\nexport class ProductEditorState {\r\n  searchResult: Product[] = [];\r\n  private _currentProduct: Product = null;\r\n\r\n  clearCurrentProduct(): void {\r\n    this._currentProduct = null;\r\n  }\r\n\r\n  clearSearchResult(): void {\r\n    this.searchResult = [];\r\n  }\r\n\r\n  get currentProduct(): Product {\r\n    return this._currentProduct;\r\n  }\r\n\r\n  set currentProduct(item: Product) {\r\n    this._currentProduct = item;\r\n  }\r\n\r\n  get isNewProduct(): boolean {\r\n    if (this.currentProduct === null) {\r\n      return true;\r\n    }\r\n    return this.currentProduct.id < 0;\r\n  }\r\n\r\n  get hasProduct(): boolean {\r\n    return this.currentProduct !== null;\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/admin/products/shared/ProductEditorState.ts\n **/","export * from './tags.component';\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/admin/tags/index.ts\n **/","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators, FormControl, REACTIVE_FORM_DIRECTIVES } from '@angular/forms';\r\n\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { ApiService, Category, Tag } from '../../shared';\r\n\r\n@Component({\r\n  selector: 'j-tags',\r\n  template: require('./tags.component.html'),\r\n  directives: [ REACTIVE_FORM_DIRECTIVES ]\r\n})\r\nexport class TagsComponent implements OnInit, OnDestroy {\r\n  private sub: Subscription;\r\n  errors: string[];\r\n\r\n  categories: Category[] = null;\r\n  selectedCategory: Category = null;\r\n  selectedTag: Tag = null;\r\n\r\n  form: FormGroup;\r\n\r\n  id: FormControl;\r\n  name: FormControl;\r\n  urlSegment: FormControl;\r\n  showInMainMenu: FormControl;\r\n  parentCategoryId: FormControl;\r\n\r\n  constructor(private api: ApiService, private fb: FormBuilder) {\r\n  }\r\n\r\n  onTagClick(category: Category, tag: Tag) {\r\n    this.selectedTag = tag;\r\n    this.selectedCategory = category;\r\n\r\n    this.id = new FormControl(-1);\r\n    this.name = new FormControl('', Validators.required);\r\n    this.urlSegment = new FormControl('', Validators.required);\r\n    this.showInMainMenu = new FormControl(false, Validators.required);\r\n    this.parentCategoryId = new FormControl(category.id, Validators.required);\r\n\r\n    if (tag !== null && typeof tag !== 'undefined') {\r\n      this.id.updateValue(tag.id);\r\n      this.name.updateValue(tag.name);\r\n      this.urlSegment.updateValue(tag.urlSegment);\r\n      this.showInMainMenu.updateValue(tag.showInMainMenu);\r\n      this.parentCategoryId.updateValue(tag.parentCategoryId);\r\n    }\r\n\r\n    this.form = this.fb.group({\r\n      'id': this.id,\r\n      'name': this.name,\r\n      'urlSegment': this.urlSegment,\r\n      'showInMainMenu': this.showInMainMenu,\r\n      'parentCategoryId': this.parentCategoryId,\r\n    });\r\n  }\r\n\r\n  onCategoryClick(category: Category) {\r\n    this.onTagClick(category, null);\r\n  }\r\n\r\n  onFormSubmit(formValue) {\r\n    if (formValue.id >= 0) {\r\n      this.api.updateTag(formValue).subscribe((res: any) => {\r\n        if (res.ok) {\r\n          let updatedTag: Tag = res.json();\r\n          let category = this.categories.find(c => c.id === updatedTag.parentCategoryId);\r\n          let tagIndex = category.tags.findIndex(m => m.id === updatedTag.id);\r\n          category.tags[tagIndex] = updatedTag;\r\n          this.onTagClick(this.selectedCategory, updatedTag);\r\n        }\r\n      }, (err: any) => this.addErrors(err));\r\n    } else {\r\n      this.api.createTag(formValue).subscribe((res: any) => {\r\n        if (res.ok) {\r\n          let createdTag: Tag = res.json();\r\n          let category = this.categories.find(c => c.id === createdTag.parentCategoryId);\r\n          category.tags.push(createdTag);\r\n          this.onTagClick(this.selectedCategory, createdTag);\r\n        }\r\n      }, (err: any) => this.addErrors(err));\r\n    }\r\n  }\r\n\r\n  onDeleteClick(id: number) {\r\n    this.api.deleteTag(id).subscribe((res: any) => {\r\n      if (res.ok) {\r\n        let idx = this.selectedCategory.tags.findIndex(t => t.id === id);\r\n        this.selectedCategory.tags.splice(idx, 1);\r\n        this.selectedCategory = null;\r\n        this.selectedTag = null;\r\n        this.form = null;\r\n      }\r\n    }, (err: any) => this.addErrors(err));\r\n  }\r\n\r\n  addErrors(errorResponse) {\r\n    this.errors = [];\r\n    console.warn(errorResponse);\r\n    for (let prop in errorResponse) {\r\n      if (errorResponse.hasOwnProperty(prop)) {\r\n        this.errors.push(errorResponse[prop]);\r\n      }\r\n    }\r\n  }\r\n\r\n  clearErrors(index: number) {\r\n    if (typeof index === 'undefined') {\r\n      this.errors = [];\r\n    } else {\r\n      this.errors.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.sub = this.api.getCategories(/* include manufacturers */false, /* include tags */true)\r\n      .map(res => res.json())\r\n      .subscribe(res => {\r\n        this.categories = res;\r\n      });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.sub.unsubscribe();\r\n  }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/admin/tags/tags.component.ts\n **/","import { Injectable } from '@angular/core';\r\nimport {\r\n  Http,\r\n  Headers,\r\n  Request,\r\n  RequestOptions,\r\n  RequestMethod,\r\n  Response,\r\n  URLSearchParams\r\n} from '@angular/http';\r\n\r\nimport { Product, ProductDetail, Category, Tag, Manufacturer } from '../models';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/Observable/of';\r\nimport 'rxjs/add/Observable/throw';\r\nimport 'rxjs/add/operator/catch';\r\n\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\ninterface IRequestOptions {\r\n  method: RequestMethod;\r\n  body?: any;\r\n  url: string;\r\n  headers?: any;\r\n  search?: any;\r\n}\r\n\r\nconst BASE_URL: string = 'http://localhost:8080';\r\n\r\n@Injectable()\r\nexport class ApiService {\r\n  constructor(private http: Http) {\r\n  }\r\n\r\n  /**\r\n   * Product\r\n   */\r\n\r\n  searchProducts(term: string, maxResults: number): any {\r\n    let params = new URLSearchParams();\r\n    params.set('term', `${term}`);\r\n    params.set('count', `${maxResults}`);\r\n    return this.jsonRequest({\r\n      method: RequestMethod.Get,\r\n      url: `${BASE_URL}/api/product/search`,\r\n      search: params\r\n    }).catch(err => this.handleError(err));\r\n  }\r\n\r\n  getProduct(id: number): any {\r\n    return this.jsonRequest({\r\n      method: RequestMethod.Get,\r\n      url: `${BASE_URL}/api/product/${id}`\r\n    }).catch(err => this.handleError(err));\r\n  }\r\n\r\n  createProduct(product: Product): any {\r\n    product.productNumber = -1; // otherwise bad request ( form used value 'will be assigned'\r\n    return this.jsonRequest({\r\n      method: RequestMethod.Post,\r\n      url: `${BASE_URL}/api/product`,\r\n      body: product\r\n    }).catch(err => this.handleError(err));\r\n  }\r\n\r\n  updateProduct(product: Product): any {\r\n    return this.jsonRequest({\r\n      method: RequestMethod.Put,\r\n      url: `${BASE_URL}/api/product/${product.id}`,\r\n      body: product\r\n    }).catch(err => this.handleError(err));\r\n  }\r\n\r\n  deleteProduct(id: number): any {\r\n    return this.jsonRequest({\r\n      method: RequestMethod.Delete,\r\n      url: `${BASE_URL}/api/product/${id}`\r\n    }).catch(err => this.handleError(err));\r\n  }\r\n\r\n  addTagToProduct(productId: number, tagId: number): any {\r\n    return this.jsonRequest({\r\n      method: RequestMethod.Put,\r\n      url: `${BASE_URL}/api/product/${productId}/add-tag/${tagId}`\r\n    }).catch(err => this.handleError(err));\r\n  }\r\n\r\n  removeTagFromProduct(productId: number, tagId: number): any {\r\n    return this.jsonRequest({\r\n      method: RequestMethod.Delete,\r\n      url: `${BASE_URL}/api/product/${productId}/remove-tag/${tagId}`\r\n    }).catch(err => this.handleError(err));\r\n  }\r\n\r\n  /**\r\n   * Product detail\r\n   */\r\n\r\n  getProductDetail(productId: number): any {\r\n    return this.jsonRequest({\r\n      method: RequestMethod.Get,\r\n      url: `${BASE_URL}/api/product/${productId}/detail`\r\n    }).catch(err => this.handleError(err));\r\n  }\r\n\r\n  createProductDetail(productId: number, model: ProductDetail): any {\r\n    return this.jsonRequest({\r\n      method: RequestMethod.Post,\r\n      url: `${BASE_URL}/api/product/${productId}/detail`,\r\n      body: model\r\n    }).catch(err => this.handleError(err));\r\n  }\r\n\r\n  updateProductDetail(productId: number, model: ProductDetail): any {\r\n    return this.jsonRequest({\r\n      method: RequestMethod.Put,\r\n      url: `${BASE_URL}/api/product/${productId}/detail`,\r\n      body: model\r\n    }).catch(err => this.handleError(err));\r\n  }\r\n\r\n  deleteProductDetail(productId: number): any {\r\n    return this.jsonRequest({\r\n      method: RequestMethod.Delete,\r\n      url: `${BASE_URL}/api/product/${productId}/detail`,\r\n    }).catch(err => this.handleError(err));\r\n  }\r\n\r\n  getMarkdownPreview(model: ProductDetail): any {\r\n    return this.jsonRequest({\r\n      method: RequestMethod.Post,\r\n      url: `${BASE_URL}/api/product-detail/preview-markdown`,\r\n      body: model\r\n    }).catch(err => this.handleError(err));\r\n  }\r\n\r\n  /**\r\n   *  Category\r\n   */\r\n\r\n  getCategories(includeManufacturers: boolean = false, includeTags: boolean = false): any {\r\n    let queryParams = new URLSearchParams();\r\n    queryParams.set('includeManufacturers', JSON.stringify(includeManufacturers));\r\n    queryParams.set('includeTags', JSON.stringify(includeTags));\r\n\r\n    return this.jsonRequest({\r\n      method: RequestMethod.Get,\r\n      url: `${BASE_URL}/api/category/list`,\r\n      search: queryParams\r\n    });\r\n  }\r\n\r\n  createCategory(model: Category): any {\r\n    return this.jsonRequest({\r\n      method: RequestMethod.Post,\r\n      url: `${BASE_URL}/api/category`,\r\n      body: model\r\n    });\r\n  }\r\n\r\n  updateCategory(model: Category): any {\r\n    return this.jsonRequest({\r\n      method: RequestMethod.Put,\r\n      url: `${BASE_URL}/api/category/${model.id}`,\r\n      body: model\r\n    });\r\n  }\r\n\r\n  deleteCategory(id: number): any {\r\n    return this.jsonRequest({\r\n      method: RequestMethod.Delete,\r\n      url: `${BASE_URL}/api/category/${id}`\r\n    });\r\n  }\r\n\r\n  /**\r\n   *  Manufacturer CRUD\r\n   */\r\n\r\n  createManufacturer(model: Manufacturer): any {\r\n    return this.jsonRequest({\r\n      method: RequestMethod.Post,\r\n      url: `${BASE_URL}/api/manufacturer`,\r\n      body: model\r\n    });\r\n  }\r\n\r\n  updateManufacturer(model: Manufacturer): any {\r\n    return this.jsonRequest({\r\n      method: RequestMethod.Put,\r\n      url: `${BASE_URL}/api/manufacturer/${model.id}`,\r\n      body: model\r\n    });\r\n  }\r\n\r\n  deleteManufacturer(id: number): any {\r\n    return this.jsonRequest({\r\n      method: RequestMethod.Delete,\r\n      url: `${BASE_URL}/api/manufacturer/${id}`\r\n    });\r\n  }\r\n\r\n  /**\r\n   *  Tags\r\n   */\r\n\r\n  getCategoryTags(categoryId: number) {\r\n    return this.jsonRequest({\r\n      method: RequestMethod.Get,\r\n      url: `${BASE_URL}/api/tag/list/category/${categoryId}`\r\n    }).catch(err => this.handleError(err));\r\n  }\r\n\r\n  createTag(model: Tag): any {\r\n    return this.jsonRequest({\r\n      method: RequestMethod.Post,\r\n      url: `${BASE_URL}/api/tag`,\r\n      body: model\r\n    });\r\n  }\r\n\r\n  updateTag(model: Tag): any {\r\n    return this.jsonRequest({\r\n      method: RequestMethod.Put,\r\n      url: `${BASE_URL}/api/tag/${model.id}`,\r\n      body: model\r\n    });\r\n  }\r\n\r\n  deleteTag(id: number): any {\r\n    return this.jsonRequest({\r\n      method: RequestMethod.Delete,\r\n      url: `${BASE_URL}/api/tag/${id}`\r\n    });\r\n  }\r\n\r\n  private jsonRequest(options: IRequestOptions): any {\r\n    if (options.body && typeof(options.body) !== 'string') {\r\n      options.body = JSON.stringify(options.body);\r\n    }\r\n    if (options.method === RequestMethod.Get) {\r\n      options.headers = new Headers({\r\n        'Accept': 'application/json'\r\n      });\r\n    } else {\r\n      options.headers = new Headers({\r\n        'Content-Type': 'application/json'\r\n      });\r\n    }\r\n\r\n    return this.http.request(new Request(options)).catch(this.handleError);\r\n  }\r\n\r\n  private handleError(error: any): any {\r\n    // let errorObject: IErrorObject = { error: 'Unknown error occurred', status: error.status };\r\n    // let contentTypeHeader = error.headers.get('Content-Type');\r\n    // if (contentTypeHeader && contentTypeHeader.includes('application/json')) {\r\n    //   errorObject = error.json();\r\n    // }\r\n    // console.log(errorObject);\r\n    console.log(error);\r\n    let errorMessage = (error.message) ? error.message : error.status ?\r\n      `${error.status} - ${error.statusText}` : 'Server error';\r\n    return Observable.throw(errorMessage);\r\n  }\r\n}\r\n\r\nexport interface IErrorObject {\r\n  error: string;\r\n  status: number;\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/shared/api/api.service.ts\n **/","export * from './api.service';\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/shared/api/index.ts\n **/","import { Tag } from './Tag';\r\nimport { Manufacturer } from './Manufacturer';\r\n\r\nexport class Category {\r\n  id: number;\r\n  name: string;\r\n  urlSegment: string;\r\n  imageUrl: string;\r\n  viewDisplayOrder: number;\r\n  manufacturers: Manufacturer[];\r\n  tags: Tag[];\r\n}\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/shared/models/Category.ts\n **/","export class Manufacturer {\r\n  id: number;\r\n  name: string;\r\n  urlSegment: string;\r\n  showInMainMenu: boolean;\r\n  parentCategoryId: number;\r\n  productCount: number;\r\n}\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/shared/models/Manufacturer.ts\n **/","import { Tag } from './Tag';\r\nimport { Manufacturer } from './Manufacturer';\r\nimport { Category } from './Category';\r\n\r\nexport class Product {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  stockCount: number;\r\n  price: number;\r\n  currentPrice: number;\r\n  productNumber: number;\r\n  imageUrl: string;\r\n  newProduct: boolean;\r\n  promoActive: boolean;\r\n\r\n  manufacturerId: number;\r\n  parentCategoryId: number;\r\n  tags: Tag[] = [];\r\n}\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/shared/models/Product.ts\n **/","export class ProductDetail {\r\n  id: number;\r\n  markup: string;\r\n  parentProductId: number;\r\n}\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/shared/models/ProductDetail.ts\n **/","export class Tag {\r\n  id: number;\r\n  name: string;\r\n  urlSegment: string;\r\n  showInMainMenu: boolean;\r\n  parentCategoryId: number;\r\n  productCount: number;\r\n\r\n  /**\r\n   * Client-side, indicates whether tag was added to working product\r\n   * Used in edit-tags.component\r\n   */\r\n  added: boolean = false;\r\n}\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/shared/models/Tag.ts\n **/","export * from './Category';\r\nexport * from './Tag';\r\nexport * from './Manufacturer';\r\nexport * from './Product';\r\nexport * from './ProductDetail';\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./Client/components/shared/models/index.ts\n **/","module.exports = \"<ul class=\\\"nav nav-tabs\\\">\\r\\n  <li class=\\\"nav-item\\\">\\r\\n    <a class=\\\"nav-link\\\" [routerLink]=\\\" ['./products'] \\\" routerLinkActive=\\\"active\\\">Products</a>\\r\\n  </li>\\r\\n  <li class=\\\"nav-item\\\">\\r\\n    <a class=\\\"nav-link\\\" [routerLink]=\\\" ['./categories'] \\\" routerLinkActive=\\\"active\\\">Categories</a>\\r\\n  </li>\\r\\n  <li class=\\\"nav-item\\\">\\r\\n    <a class=\\\"nav-link\\\" [routerLink]=\\\" ['./manufacturers'] \\\" routerLinkActive=\\\"active\\\">Manufacturers</a>\\r\\n  </li>\\r\\n  <li class=\\\"nav-item\\\">\\r\\n    <a class=\\\"nav-link\\\" [routerLink]=\\\" ['./tags'] \\\" routerLinkActive=\\\"active\\\">Tags</a>\\r\\n  </li>\\r\\n  <li class=\\\"nav-item\\\">\\r\\n    <a class=\\\"nav-link\\\" [routerLink]=\\\" ['./orders'] \\\" routerLinkActive=\\\"active\\\">Orders</a>\\r\\n  </li>  \\r\\n</ul>\\r\\n\\r\\n<br/>\\r\\n\\r\\n<router-outlet></router-outlet>\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./Client/components/admin/admin.component.html\n ** module id = 768\n ** module chunks = 5\n **/","module.exports = \"<div class=\\\"container-fluid\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n\\r\\n    <!--category list-->\\r\\n    <div class=\\\"col-xs-3\\\">\\r\\n      <ul>\\r\\n        <li (click)=\\\"onCategoryClick(null)\\\">New Category</li>\\r\\n        <li *ngFor=\\\"let category of categories\\\" (click)=\\\"onCategoryClick(category)\\\">{{ category.name }}</li>\\r\\n      </ul>\\r\\n    </div>\\r\\n\\r\\n    <!--category form-->\\r\\n    <div class=\\\"col-xs-9\\\">\\r\\n\\r\\n        <form novalidate *ngIf=\\\"form\\\" [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onFormSubmit(form.value)\\\">\\r\\n\\r\\n          <!--header-->\\r\\n          <h5>\\r\\n            <span *ngIf=\\\"id.value >= 0\\\">Modifying category {{ selectedCategory.name }}</span>\\r\\n            <span *ngIf=\\\"id.value < 0\\\">Creating new category</span>\\r\\n          </h5>\\r\\n\\r\\n          <!--name-->\\r\\n          <div class=\\\"form-group\\\" [class.has-success]=\\\"name.valid && name.touched\\\"\\r\\n               [class.has-error]=\\\"!name.valid && name.touched\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control form-control-md\\\"\\r\\n                   placeholder=\\\"Name\\\" [formControl]=\\\"name\\\">\\r\\n            <small class=\\\"text-muted\\\" *ngIf=\\\"name.hasError('required') && name.touched\\\">\\r\\n              Name is required.\\r\\n            </small>\\r\\n          </div>\\r\\n\\r\\n          <!--url segment-->\\r\\n          <div class=\\\"form-group\\\" [class.has-success]=\\\"urlSegment.valid && urlSegment.touched\\\"\\r\\n               [class.has-error]=\\\"!urlSegment.valid && urlSegment.touched\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control form-control-md\\\"\\r\\n                   placeholder=\\\"Url segment\\\" [formControl]=\\\"urlSegment\\\">\\r\\n            <small class=\\\"text-muted\\\" *ngIf=\\\"urlSegment.hasError('required') && urlSegment.touched\\\">\\r\\n              Url segment is required.\\r\\n            </small>\\r\\n          </div>\\r\\n\\r\\n          <!--image url-->\\r\\n          <div class=\\\"form-group\\\" [class.has-success]=\\\"imageUrl.valid && imageUrl.touched\\\"\\r\\n               [class.has-error]=\\\"!imageUrl.valid && imageUrl.touched\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control form-control-md\\\"\\r\\n                   placeholder=\\\"Image url\\\" [formControl]=\\\"imageUrl\\\">\\r\\n            <small class=\\\"text-muted\\\" *ngIf=\\\"imageUrl.hasError('required') && imageUrl.touched\\\">\\r\\n              Image url is required.\\r\\n            </small>\\r\\n          </div>\\r\\n\\r\\n          <!--view display order-->\\r\\n          <div class=\\\"form-group\\\" [class.has-success]=\\\"viewDisplayOrder.valid && viewDisplayOrder.touched\\\"\\r\\n               [class.has-error]=\\\"!viewDisplayOrder.valid && viewDisplayOrder.touched\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control form-control-md\\\"\\r\\n                   placeholder=\\\"View display order\\\" [formControl]=\\\"viewDisplayOrder\\\">\\r\\n            <small class=\\\"text-muted\\\" *ngIf=\\\"viewDisplayOrder.hasError('required') && viewDisplayOrder.touched\\\">\\r\\n              View display order is required.\\r\\n            </small>\\r\\n            <small class=\\\"text-muted\\\" *ngIf=\\\"viewDisplayOrder.hasError('pattern') && viewDisplayOrder.touched\\\">\\r\\n              Field must be a number.\\r\\n            </small>\\r\\n          </div>\\r\\n\\r\\n          <!--submit button-->\\r\\n          <button type=\\\"submit\\\" [disabled]=\\\"!form.valid\\\" class=\\\"btn btn-primary\\\">\\r\\n            <span *ngIf=\\\"selectedCategory == null\\\">Create</span>\\r\\n            <span *ngIf=\\\"selectedCategory != null\\\">Update</span>\\r\\n          </button>\\r\\n\\r\\n          <!--delete button-->\\r\\n          <button type=\\\"button\\\" [disabled]=\\\"id.value < 0\\\" class=\\\"btn btn-warning\\\" (click)=\\\"onDeleteClick(id.value)\\\">\\r\\n            Delete\\r\\n          </button>\\r\\n\\r\\n        </form>\\r\\n\\r\\n      <!--error alerts-->\\r\\n      <div *ngIf=\\\"errors && errors.length > 0\\\">\\r\\n        <div class=\\\"alert alert-warning alert-dismissible fade in\\\" role=\\\"alert\\\"\\r\\n             *ngFor=\\\"let error of errors; let idx = index\\\">\\r\\n          <button type=\\\"button\\\" class=\\\"close\\\">\\r\\n            <span aria-hidden=\\\"true\\\" (click)=\\\"clearErrors(idx)\\\">&times;</span>\\r\\n          </button>\\r\\n          {{ error }}\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./Client/components/admin/categories/categories.component.html\n ** module id = 769\n ** module chunks = 5\n **/","module.exports = \"<div class=\\\"container-fluid\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n\\r\\n    <!--category list-->\\r\\n    <div class=\\\"col-xs-3\\\">\\r\\n      <ul>\\r\\n        <li *ngFor=\\\"let category of categories\\\" (click)=\\\"onCategoryClick(category)\\\">\\r\\n          {{ category.name }}\\r\\n          <ul *ngIf=\\\"category.manufacturers.length > 0\\\">\\r\\n            <li *ngFor=\\\"let manufacturer of category.manufacturers\\\"\\r\\n                (click)=\\\"onManufacturerClick(category, manufacturer); $event.stopPropagation()\\\">\\r\\n              {{ manufacturer.name }}\\r\\n            </li>\\r\\n          </ul>\\r\\n        </li>\\r\\n      </ul>\\r\\n    </div>\\r\\n\\r\\n    <!--manufacturer form-->\\r\\n    <div class=\\\"col-xs-9\\\">\\r\\n\\r\\n      <form novalidate *ngIf=\\\"form\\\" [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onFormSubmit(form.value)\\\">\\r\\n\\r\\n        <!--header-->\\r\\n        <h5 *ngIf=\\\"selectedCategory\\\">\\r\\n          <span *ngIf=\\\"id.value >= 0\\\">Modifying manufacturer {{ selectedManufacturer.name }} in category {{ selectedCategory.name }}</span>\\r\\n          <span *ngIf=\\\"id.value < 0\\\">Creating new manufacturer in category {{ selectedCategory.name }}</span>\\r\\n        </h5>\\r\\n\\r\\n        <!--name-->\\r\\n        <div class=\\\"form-group row\\\" [class.has-success]=\\\"name.valid && name.touched\\\"\\r\\n             [class.has-error]=\\\"!name.valid && name.touched\\\">\\r\\n          <div class=\\\"col-xs-7\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control form-control-md\\\"\\r\\n                   placeholder=\\\"Name\\\" [formControl]=\\\"name\\\">\\r\\n            <small class=\\\"text-muted\\\" *ngIf=\\\"name.hasError('required') && name.touched\\\">\\r\\n              Name is required.\\r\\n            </small>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <!--url segment-->\\r\\n        <div class=\\\"form-group row\\\" [class.has-success]=\\\"urlSegment.valid && urlSegment.touched\\\"\\r\\n             [class.has-error]=\\\"!urlSegment.valid && urlSegment.touched\\\">\\r\\n          <div class=\\\"col-xs-7\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control form-control-md\\\"\\r\\n                   placeholder=\\\"Url segment\\\" [formControl]=\\\"urlSegment\\\">\\r\\n            <small class=\\\"text-muted\\\" *ngIf=\\\"urlSegment.hasError('required') && urlSegment.touched\\\">\\r\\n              Url segment is required.\\r\\n            </small>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <!--show in main menu-->\\r\\n        <div class=\\\"form-group row\\\">\\r\\n          <div class=\\\"checkbox col-xs-7\\\">\\r\\n            <label>\\r\\n              <input type=\\\"checkbox\\\" [formControl]=\\\"showInMainMenu\\\"> Show in main menu\\r\\n            </label>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <!--submit button-->\\r\\n        <button type=\\\"submit\\\" [disabled]=\\\"!form.valid\\\" class=\\\"btn btn-primary\\\">\\r\\n          <span *ngIf=\\\"selectedManufacturer == null\\\">Create</span>\\r\\n          <span *ngIf=\\\"selectedManufacturer != null\\\">Update</span>\\r\\n        </button>\\r\\n\\r\\n        <!--delete button-->\\r\\n        <button type=\\\"button\\\" [disabled]=\\\"id.value < 0\\\" class=\\\"btn btn-warning\\\" (click)=\\\"onDeleteClick(id.value)\\\">\\r\\n          Delete\\r\\n        </button>\\r\\n\\r\\n      </form>\\r\\n\\r\\n      <!--error alerts-->\\r\\n      <div *ngIf=\\\"errors && errors.length > 0\\\">\\r\\n        <div class=\\\"alert alert-warning alert-dismissible fade in\\\" role=\\\"alert\\\"\\r\\n             *ngFor=\\\"let error of errors; let idx = index\\\">\\r\\n          <button type=\\\"button\\\" class=\\\"close\\\">\\r\\n            <span aria-hidden=\\\"true\\\" (click)=\\\"clearErrors(idx)\\\">&times;</span>\\r\\n          </button>\\r\\n          {{ error }}\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./Client/components/admin/manufacruters/manufacturers.component.html\n ** module id = 770\n ** module chunks = 5\n **/","module.exports = \"<p>orders</p>\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./Client/components/admin/orders/orders.component.html\n ** module id = 771\n ** module chunks = 5\n **/","module.exports = \"<h5>Item: {{ product.name }} (#{{ product.productNumber }})</h5>\\r\\n<br/>\\r\\n\\r\\n<div class=\\\"container-flex\\\" *ngIf=\\\"form\\\">\\r\\n  <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit(form.value)\\\">\\r\\n    <div class=\\\"row\\\">    \\r\\n      <label for=\\\"markup\\\">Markup <small>({{ markup.value.length }}/{{markupMaxLength}})</small> </label>\\r\\n      <small class=\\\"text-muted text-danger\\\" *ngIf=\\\"markup.hasError('maxlength') && !markup.pristine\\\">\\r\\n        Maximum length is {{ markupMaxLength }}\\r\\n      </small>\\r\\n\\r\\n      <textarea auto-adjust id=\\\"markup\\\" [formControl]=\\\"markup\\\" style=\\\"width: 100%; min-height: 50vh\\\"></textarea>        \\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n      <!--submit button-->\\r\\n      <button type=\\\"submit\\\" [disabled]=\\\"!form.valid\\\" class=\\\"btn btn-primary\\\">\\r\\n        Save\\r\\n      </button>\\r\\n\\r\\n      <!--preview button-->\\r\\n      <button type=\\\"button\\\" [disabled]=\\\"!form.valid\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onPreviewClick(form.value)\\\">\\r\\n        Preview\\r\\n      </button>\\r\\n    </div>\\r\\n  </form>\\r\\n\\r\\n  <div class=\\\"row\\\" *ngIf=\\\"preview\\\">\\r\\n    <h3>Preview</h3>\\r\\n    <span [innerHtml]=\\\"preview\\\"></span>\\r\\n  </div>\\r\\n\\r\\n</div>\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./Client/components/admin/products/edit-details/edit-details.component.html\n ** module id = 772\n ** module chunks = 5\n **/","module.exports = \"<div class=\\\"container-fluid\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n\\r\\n    <form novalidate *ngIf=\\\"form\\\" [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onFormSubmit(form.value)\\\">\\r\\n\\r\\n      <!--name-->\\r\\n      <fieldset class=\\\"form-group row\\\"  [class.has-success]=\\\"name.valid && name.touched\\\"\\r\\n                                        [class.has-error]=\\\"!name.valid && name.touched\\\">\\r\\n        <label for=\\\"name\\\">Name</label>\\r\\n        <small class=\\\"text-muted\\\">({{ name.value.length }}/{{ fieldRules.name.maxLength }})</small>\\r\\n\\r\\n        <input class=\\\"form-control\\\" id=\\\"name\\\" placeholder=\\\"Name\\\" [formControl]=\\\"name\\\"\\r\\n               [class.form-control-success]=\\\"name.valid && name.touched\\\"\\r\\n               [class.form-control-error]=\\\"!name.valid && name.touched\\\">\\r\\n\\r\\n        <small class=\\\"text-muted\\\" *ngIf=\\\"name.hasError('required') && name.touched\\\">\\r\\n          Name is required <br/>\\r\\n        </small>\\r\\n        <small class=\\\"text-muted\\\" *ngIf=\\\"name.hasError('minlength') && name.touched\\\">\\r\\n          Minimum length is {{ fieldRules.name.minLength }} <br/>\\r\\n        </small>\\r\\n        <small class=\\\"text-muted\\\" *ngIf=\\\"name.hasError('maxlength') && name.touched\\\">\\r\\n          Maximum length is {{ fieldRules.name.maxLength }} <br/>\\r\\n        </small>\\r\\n      </fieldset>\\r\\n\\r\\n      <!--description-->\\r\\n      <fieldset class=\\\"form-group row\\\"  [class.has-success]=\\\"description.valid && description.touched\\\"\\r\\n                                        [class.has-error]=\\\"!description.valid && description.touched\\\">\\r\\n        <label for=\\\"description\\\">Description</label>\\r\\n        <small class=\\\"text-muted\\\">({{ description.value.length }}/{{ fieldRules.description.maxLength }})</small>\\r\\n\\r\\n        <input class=\\\"form-control\\\" id=\\\"description\\\" placeholder=\\\"Name\\\" [formControl]=\\\"description\\\"\\r\\n               [class.form-control-success]=\\\"description.valid && description.touched\\\"\\r\\n               [class.form-control-error]=\\\"!description.valid && description.touched\\\">\\r\\n\\r\\n        <small class=\\\"text-muted\\\" *ngIf=\\\"description.hasError('required') && description.touched\\\">\\r\\n          Description is required <br/>\\r\\n        </small>\\r\\n        <small class=\\\"text-muted\\\" *ngIf=\\\"description.hasError('minlength') && description.touched\\\">\\r\\n          Minimum length is {{ fieldRules.description.minLength }} <br/>\\r\\n        </small>\\r\\n        <small class=\\\"text-muted\\\" *ngIf=\\\"description.hasError('maxlength') && description.touched\\\">\\r\\n          Maximum length is {{ fieldRules.description.maxLength }} <br/>\\r\\n        </small>\\r\\n      </fieldset>\\r\\n\\r\\n      <!--price, current price, stock qty-->\\r\\n      <div class=\\\"container-flex\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"col-xs-3\\\">\\r\\n\\r\\n            <!--price-->\\r\\n            <fieldset class=\\\"form-group row\\\"  [class.has-success]=\\\"price.valid && price.touched\\\"\\r\\n                                              [class.has-error]=\\\"!price.valid && price.touched\\\">\\r\\n              <label for=\\\"price\\\">Price</label>\\r\\n\\r\\n              <input class=\\\"form-control\\\" id=\\\"price\\\" placeholder=\\\"Price\\\" [formControl]=\\\"price\\\"\\r\\n                     [class.form-control-success]=\\\"price.valid && price.touched\\\"\\r\\n                     [class.form-control-error]=\\\"!price.valid && price.touched\\\">\\r\\n\\r\\n              <small class=\\\"text-muted\\\" *ngIf=\\\"price.hasError('required') && price.touched\\\">\\r\\n                Price is required <br/>\\r\\n              </small>\\r\\n              <small class=\\\"text-muted\\\" *ngIf=\\\"price.hasError('pattern') && price.touched\\\">\\r\\n                Price must be a positive number. <br/>\\r\\n              </small>\\r\\n            </fieldset>\\r\\n\\r\\n          </div>\\r\\n          <div class=\\\"col-xs-4 col-xs-offset-1\\\">\\r\\n\\r\\n            <!--currentPrice-->\\r\\n            <fieldset class=\\\"form-group row\\\"  [class.has-success]=\\\"currentPrice.valid && currentPrice.touched\\\"\\r\\n                                              [class.has-error]=\\\"!currentPrice.valid && currentPrice.touched\\\">\\r\\n              <label for=\\\"currentPrice\\\">Current price</label>\\r\\n\\r\\n              <input class=\\\"form-control\\\" id=\\\"currentPrice\\\" placeholder=\\\"Current price\\\" [formControl]=\\\"currentPrice\\\"\\r\\n                     [class.form-control-success]=\\\"currentPrice.valid && currentPrice.touched\\\"\\r\\n                     [class.form-control-error]=\\\"!currentPrice.valid && currentPrice.touched\\\">\\r\\n\\r\\n              <small class=\\\"text-muted\\\" *ngIf=\\\"currentPrice.hasError('required') && currentPrice.touched\\\">\\r\\n                Current price is required <br/>\\r\\n              </small>\\r\\n              <small class=\\\"text-muted\\\" *ngIf=\\\"currentPrice.hasError('pattern') && currentPrice.touched\\\">\\r\\n                Current price must be a positive number. <br/>\\r\\n              </small>\\r\\n            </fieldset>\\r\\n\\r\\n          </div>\\r\\n          <div class=\\\"col-xs-3 col-xs-offset-1\\\">\\r\\n\\r\\n            <!--stockCount-->\\r\\n            <fieldset class=\\\"form-group row\\\"  [class.has-success]=\\\"stockCount.valid && stockCount.touched\\\"\\r\\n                      [class.has-error]=\\\"!stockCount.valid && stockCount.touched\\\">\\r\\n              <label for=\\\"stockCount\\\">Stock quantity</label>\\r\\n\\r\\n              <input class=\\\"form-control\\\" id=\\\"stockCount\\\" placeholder=\\\"Stock quantity\\\" [formControl]=\\\"stockCount\\\"\\r\\n                     [class.form-control-success]=\\\"stockCount.valid && stockCount.touched\\\"\\r\\n                     [class.form-control-error]=\\\"!stockCount.valid && stockCount.touched\\\">\\r\\n\\r\\n              <small class=\\\"text-muted\\\" *ngIf=\\\"stockCount.hasError('required') && stockCount.touched\\\">\\r\\n                Stock quantity is required <br/>\\r\\n              </small>\\r\\n              <small class=\\\"text-muted\\\" *ngIf=\\\"stockCount.hasError('pattern') && stockCount.touched\\\">\\r\\n                Stock quantity must be a positive number. <br/>\\r\\n              </small>\\r\\n            </fieldset>\\r\\n\\r\\n          </div>\\r\\n\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <!--imageUrl-->\\r\\n      <fieldset class=\\\"form-group row\\\"  [class.has-success]=\\\"imageUrl.valid && imageUrl.touched\\\"\\r\\n                                        [class.has-error]=\\\"!imageUrl.valid && imageUrl.touched\\\">\\r\\n        <label for=\\\"imageUrl\\\">Image Url</label>\\r\\n        <small class=\\\"text-muted\\\">({{ imageUrl.value.length }}/{{ fieldRules.imageUrl.maxLength }})</small>\\r\\n\\r\\n        <input class=\\\"form-control\\\" id=\\\"imageUrl\\\" placeholder=\\\"Image Url\\\" [formControl]=\\\"imageUrl\\\"\\r\\n               [class.form-control-success]=\\\"imageUrl.valid && imageUrl.touched\\\"\\r\\n               [class.form-control-error]=\\\"!imageUrl.valid && imageUrl.touched\\\">\\r\\n\\r\\n        <small class=\\\"text-muted\\\" *ngIf=\\\"imageUrl.hasError('required') && imageUrl.touched\\\">\\r\\n          Image Url is required <br/>\\r\\n        </small>\\r\\n        <small class=\\\"text-muted\\\" *ngIf=\\\"imageUrl.hasError('minlength') && imageUrl.touched\\\">\\r\\n          Minimum length is {{ fieldRules.imageUrl.minLength }} <br/>\\r\\n        </small>\\r\\n        <small class=\\\"text-muted\\\" *ngIf=\\\"imageUrl.hasError('maxlength') && imageUrl.touched\\\">\\r\\n          Maximum length is {{ fieldRules.imageUrl.maxLength }} <br/>\\r\\n        </small>\\r\\n      </fieldset>\\r\\n\\r\\n      <!--product number, new product, promo active-->\\r\\n      <div class=\\\"container-flex\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n\\r\\n          <!--productNumber-->\\r\\n          <div class=\\\"col-xs-4\\\">\\r\\n            <fieldset class=\\\"form-group row\\\">\\r\\n              <label for=\\\"stockCount\\\">Product number</label>\\r\\n              <input class=\\\"form-control\\\" id=\\\"productNumber\\\" [formControl]=\\\"productNumber\\\" disabled>\\r\\n            </fieldset>\\r\\n          </div>\\r\\n\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"container-flex\\\" *ngIf=\\\"id.value < 0\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n\\r\\n          <div class=\\\"col-xs-5 col-xs-offset-1\\\">\\r\\n\\r\\n            <h6>Select category\\r\\n              <sup class=\\\"text-muted text-danger\\\" *ngIf=\\\"parentCategoryId.hasError('invalidCategory')\\\">\\r\\n                Required\\r\\n              </sup>\\r\\n            </h6>\\r\\n            <br/>\\r\\n\\r\\n            <div class=\\\"radio\\\" *ngFor=\\\"let category of categories; trackBy:category?.id\\\">\\r\\n              <label>\\r\\n                <input type=\\\"radio\\\" name=\\\"categories\\\" (click)=\\\"onCategorySelect(category)\\\">\\r\\n                {{ category.id }} - {{ category.name }}\\r\\n              </label>\\r\\n            </div>\\r\\n\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"col-xs-5 col-xs-offset-1\\\">\\r\\n\\r\\n            <h6>Select manufacturer\\r\\n              <sup class=\\\"text-muted text-danger\\\" *ngIf=\\\"manufacturerId.hasError('invalidManufacturer')\\\">\\r\\n                Required\\r\\n              </sup>\\r\\n            </h6>\\r\\n            <br/>\\r\\n\\r\\n            <div class=\\\"radio\\\" *ngFor=\\\"let man of manufacturers; trackBy:man?.id\\\">\\r\\n              <label>\\r\\n                <input type=\\\"radio\\\" name=\\\"manufacturers\\\" (click)=\\\"onManufacturerSelect(man)\\\">\\r\\n                {{ man.id }} - {{ man.name }}\\r\\n              </label>\\r\\n            </div>\\r\\n\\r\\n          </div>\\r\\n\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"checkbox\\\">\\r\\n        <label>\\r\\n          <input type=\\\"checkbox\\\" [formControl]=\\\"newProduct\\\">\\r\\n          New Product\\r\\n        </label>\\r\\n      </div>\\r\\n      <div class=\\\"checkbox\\\">\\r\\n        <label>\\r\\n          <input type=\\\"checkbox\\\" [formControl]=\\\"promoActive\\\">\\r\\n          Promo active\\r\\n        </label>\\r\\n      </div>\\r\\n\\r\\n\\r\\n      <!--submit button-->\\r\\n      <button type=\\\"submit\\\" [disabled]=\\\"!form.valid\\\" class=\\\"btn btn-primary\\\">\\r\\n        Submit\\r\\n      </button>\\r\\n\\r\\n      <!--delete button-->\\r\\n      <button type=\\\"button\\\" [disabled]=\\\"id.value < 0\\\" class=\\\"btn btn-warning\\\" *ngIf=\\\"product\\\" (click)=\\\"onDeleteClick()\\\">\\r\\n        Delete\\r\\n      </button>\\r\\n\\r\\n      <!--clear form button-->\\r\\n      <button type=\\\"button\\\" class=\\\"btn btn-danger pull-right\\\" (click)=\\\"onClearFormClick()\\\">\\r\\n        Clear form / New product\\r\\n      </button>\\r\\n\\r\\n    </form>\\r\\n\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"modal\\\" [ngStyle]=\\\"{ 'display': showConfirmDelete ? 'block':'none', 'background-color': showConfirmDelete ? 'rgba(0,0,0,0.7)':'transparent' }\\\"\\r\\n     *ngIf=\\\"product && product.name\\\">\\r\\n  <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\r\\n    <div class=\\\"modal-content\\\">\\r\\n      <div class=\\\"modal-header\\\">\\r\\n        <h4 class=\\\"modal-title\\\">Confirm</h4>\\r\\n      </div>\\r\\n      <div class=\\\"modal-body\\\">\\r\\n        <p>Do you really really want to delete '{{ product.name }}'?</p>\\r\\n      </div>\\r\\n      <div class=\\\"modal-footer\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"onConfirmCancel()\\\">No, go back</button>\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onConfirmOk()\\\">Yes, delete</button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./Client/components/admin/products/edit-product/edit-product.component.html\n ** module id = 773\n ** module chunks = 5\n **/","module.exports = \"<h5>Item: {{ product.name }} (#{{ product.productNumber }})</h5>\\r\\n<br/>\\r\\n\\r\\n<div class=\\\"container-fluid\\\">\\r\\n  <div class=\\\"row\\\" style=\\\"text-align: center\\\">\\r\\n\\r\\n    <!--available tag list-->\\r\\n    <div class=\\\"col-xs-4 col-xs-offset-2\\\">\\r\\n      <h6>Available tags</h6>\\r\\n      <div *ngFor=\\\"let tag of availableTags\\\">\\r\\n        <a class=\\\"label\\\" (click)=\\\"addTag(tag)\\\" [class.label-primary]=\\\"!tag.added\\\" [class.label-default]=\\\"tag.added\\\">\\r\\n          {{ tag.name }}\\r\\n        </a>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"col-xs-4\\\">\\r\\n      <h6>Assigned tags</h6>\\r\\n      <div *ngFor=\\\"let tag of assignedTags\\\">\\r\\n        <a class=\\\"label label-primary\\\" (click)=\\\"removeTag(tag)\\\">{{ tag.name }}</a>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n  </div>\\r\\n</div>\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./Client/components/admin/products/edit-tags/edit-tags.component.html\n ** module id = 774\n ** module chunks = 5\n **/","module.exports = \"<div>\\r\\n  <form *ngIf=\\\"form\\\" [formGroup]=\\\"form\\\">\\r\\n\\r\\n    <h5>Product search</h5>\\r\\n\\r\\n    <input type=\\\"text\\\" class=\\\"form-control form-control-md\\\" placeholder=\\\"Search...\\\" [formControl]=\\\"term\\\">\\r\\n    <small class=\\\"text-muted\\\" *ngIf=\\\"term.hasError('minlength')\\\">Minimum length is 3 characters</small>\\r\\n    <small class=\\\"text-muted\\\" *ngIf=\\\"term.hasError('maxlength')\\\">Maximum length is 30 characters</small>\\r\\n\\r\\n  </form>\\r\\n\\r\\n  <br/>\\r\\n\\r\\n\\r\\n    <div class=\\\"card-columns\\\" *ngIf=\\\"products && products.length > 0\\\">\\r\\n\\r\\n\\r\\n        <div class=\\\"card\\\" *ngFor=\\\"let product of products\\\" (click)=\\\"onProductClick(product)\\\">\\r\\n          <img class=\\\"card-img-top\\\" [src]=\\\"product.imageUrl\\\" style=\\\"width: 100%;\\\">\\r\\n          <div class=\\\"card-block\\\">\\r\\n            <h5 class=\\\"card-title\\\">{{ product.name }}</h5>\\r\\n            <p class=\\\"card-text\\\">Current price: {{ product.currentPrice }}</p>\\r\\n            <p class=\\\"card-text\\\">{{ product.description }}</p>\\r\\n          </div>\\r\\n          <div class=\\\"card-footer text-muted\\\">\\r\\n            <!--void 0 so bootstrap anchor styles work-->\\r\\n            <a class=\\\"card-link\\\" href=\\\"javascript:void(0)\\\" (click)=\\\"onLinkClick('/products/edit', product); $event.stopPropagation()\\\">Edit</a>\\r\\n            <a class=\\\"card-link\\\" href=\\\"javascript:void(0)\\\" (click)=\\\"onLinkClick('/products/tags', product); $event.stopPropagation()\\\">Tags</a>\\r\\n            <a class=\\\"card-link\\\" href=\\\"javascript:void(0)\\\" (click)=\\\"onLinkClick('/products/detail', product); $event.stopPropagation()\\\">Detail</a>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n\\r\\n    </div>\\r\\n\\r\\n</div>\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./Client/components/admin/products/product-search/product-search.component.html\n ** module id = 775\n ** module chunks = 5\n **/","module.exports = \"<div class=\\\"container-fluid\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n\\r\\n    <ul class=\\\"nav nav-tabs\\\">\\r\\n      <li class=\\\"nav-item\\\">\\r\\n        <a class=\\\"nav-link\\\" [routerLink]=\\\" ['./search'] \\\" routerLinkActive=\\\"active\\\">Search</a>\\r\\n      </li>\\r\\n      <li class=\\\"nav-item\\\">\\r\\n        <a class=\\\"nav-link\\\" [routerLink]=\\\" ['./edit'] \\\" routerLinkActive=\\\"active\\\">Create / Edit</a>\\r\\n      </li>\\r\\n      <li class=\\\"nav-item\\\">\\r\\n        <a class=\\\"nav-link\\\" [routerLink]=\\\" ['./tags'] \\\" routerLinkActive=\\\"active\\\" [class.disabled]=\\\"noProductSelected\\\">Manage tags</a>\\r\\n      </li>\\r\\n      <li class=\\\"nav-item\\\">\\r\\n        <a class=\\\"nav-link\\\" [routerLink]=\\\" ['./detail'] \\\" routerLinkActive=\\\"active\\\" [class.disabled]=\\\"noProductSelected\\\">Edit details page</a>\\r\\n      </li>\\r\\n\\r\\n    </ul>\\r\\n\\r\\n    <br/>\\r\\n\\r\\n    <router-outlet></router-outlet>\\r\\n  </div>\\r\\n</div>\\r\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./Client/components/admin/products/products.component.html\n ** module id = 776\n ** module chunks = 5\n **/","module.exports = \"<div class=\\\"container-fluid\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n\\r\\n    <!--category list-->\\r\\n    <div class=\\\"col-xs-3\\\">\\r\\n      <ul>\\r\\n        <li *ngFor=\\\"let category of categories\\\" (click)=\\\"onCategoryClick(category)\\\">\\r\\n          {{ category.name }}\\r\\n          <ul *ngIf=\\\"category.tags.length > 0\\\">\\r\\n            <li *ngFor=\\\"let tag of category.tags\\\" (click)=\\\"onTagClick(category, tag); $event.stopPropagation()\\\">\\r\\n              {{ tag.name }}\\r\\n            </li>\\r\\n          </ul>\\r\\n        </li>\\r\\n      </ul>\\r\\n    </div>\\r\\n\\r\\n    <!--tag form-->\\r\\n    <div class=\\\"col-xs-9\\\">\\r\\n\\r\\n      <form novalidate *ngIf=\\\"form\\\" [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onFormSubmit(form.value)\\\">\\r\\n\\r\\n        <!--header-->\\r\\n        <h5 *ngIf=\\\"selectedCategory\\\">\\r\\n          <span *ngIf=\\\"id.value >= 0\\\">Modifying tag {{ selectedTag.name }} in category {{ selectedCategory.name }}</span>\\r\\n          <span *ngIf=\\\"id.value < 0\\\">Creating new tag in category {{ selectedCategory.name }}</span>\\r\\n        </h5>\\r\\n\\r\\n        <!--name-->\\r\\n        <div class=\\\"form-group row\\\" [class.has-success]=\\\"name.valid && name.touched\\\"\\r\\n             [class.has-error]=\\\"!name.valid && name.touched\\\">\\r\\n          <div class=\\\"col-xs-7\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control form-control-md\\\"\\r\\n                   placeholder=\\\"Name\\\" [formControl]=\\\"name\\\">\\r\\n            <small class=\\\"text-muted\\\" *ngIf=\\\"name.hasError('required') && name.touched\\\">\\r\\n              Name is required.\\r\\n            </small>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <!--url segment-->\\r\\n        <div class=\\\"form-group row\\\" [class.has-success]=\\\"urlSegment.valid && urlSegment.touched\\\"\\r\\n             [class.has-error]=\\\"!urlSegment.valid && urlSegment.touched\\\">\\r\\n          <div class=\\\"col-xs-7\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control form-control-md\\\"\\r\\n                   placeholder=\\\"Url segment\\\" [formControl]=\\\"urlSegment\\\">\\r\\n            <small class=\\\"text-muted\\\" *ngIf=\\\"urlSegment.hasError('required') && urlSegment.touched\\\">\\r\\n              Url segment is required.\\r\\n            </small>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <!--show in main menu-->\\r\\n        <div class=\\\"form-group row\\\">\\r\\n          <div class=\\\"checkbox col-xs-7\\\">\\r\\n            <label>\\r\\n              <input type=\\\"checkbox\\\" [formControl]=\\\"showInMainMenu\\\"> Show in main menu\\r\\n            </label>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <!--submit button-->\\r\\n        <button type=\\\"submit\\\" [disabled]=\\\"!form.valid\\\" class=\\\"btn btn-primary\\\">\\r\\n          <span *ngIf=\\\"selectedTag == null\\\">Create</span>\\r\\n          <span *ngIf=\\\"selectedTag != null\\\">Update</span>\\r\\n        </button>\\r\\n\\r\\n        <!--delete button-->\\r\\n        <button type=\\\"button\\\" [disabled]=\\\"id.value < 0\\\" class=\\\"btn btn-warning\\\" (click)=\\\"onDeleteClick(id.value)\\\">\\r\\n          Delete\\r\\n        </button>\\r\\n\\r\\n      </form>\\r\\n\\r\\n      <!--error alerts-->\\r\\n      <div *ngIf=\\\"errors && errors.length > 0\\\">\\r\\n        <div class=\\\"alert alert-warning alert-dismissible fade in\\\" role=\\\"alert\\\"\\r\\n             *ngFor=\\\"let error of errors; let idx = index\\\">\\r\\n          <button type=\\\"button\\\" class=\\\"close\\\">\\r\\n            <span aria-hidden=\\\"true\\\" (click)=\\\"clearErrors(idx)\\\">&times;</span>\\r\\n          </button>\\r\\n          {{ error }}\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./Client/components/admin/tags/tags.component.html\n ** module id = 777\n ** module chunks = 5\n **/","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar throw_1 = require('../../observable/throw');\nObservable_1.Observable.throw = throw_1._throw;\n//# sourceMappingURL=throw.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/rxjs/add/Observable/throw.js\n ** module id = 778\n ** module chunks = 5\n **/","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ErrorObservable = (function (_super) {\n    __extends(ErrorObservable, _super);\n    function ErrorObservable(error, scheduler) {\n        _super.call(this);\n        this.error = error;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer and immediately\n     * emits an error notification.\n     *\n     * <span class=\"informal\">Just emits 'error', and nothing else.\n     * </span>\n     *\n     * <img src=\"./img/throw.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the error notification. It can be used for composing with other\n     * Observables, such as in a {@link mergeMap}.\n     *\n     * @example <caption>Emit the number 7, then emit an error.</caption>\n     * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @example <caption>Map and flattens numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n     * var interval = Rx.Observable.interval(1000);\n     * var result = interval.mergeMap(x =>\n     *   x === 13 ?\n     *     Rx.Observable.throw('Thirteens are bad') :\n     *     Rx.Observable.of('a', 'b', 'c')\n     * );\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link of}\n     *\n     * @param {any} error The particular Error to pass to the error notification.\n     * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n     * the emission of the error notification.\n     * @return {Observable} An error Observable: emits only the error notification\n     * using the given error argument.\n     * @static true\n     * @name throw\n     * @owner Observable\n     */\n    ErrorObservable.create = function (error, scheduler) {\n        return new ErrorObservable(error, scheduler);\n    };\n    ErrorObservable.dispatch = function (arg) {\n        var error = arg.error, subscriber = arg.subscriber;\n        subscriber.error(error);\n    };\n    ErrorObservable.prototype._subscribe = function (subscriber) {\n        var error = this.error;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ErrorObservable.dispatch, 0, {\n                error: error, subscriber: subscriber\n            });\n        }\n        else {\n            subscriber.error(error);\n        }\n    };\n    return ErrorObservable;\n}(Observable_1.Observable));\nexports.ErrorObservable = ErrorObservable;\n//# sourceMappingURL=ErrorObservable.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/rxjs/observable/ErrorObservable.js\n ** module id = 779\n ** module chunks = 5\n **/","\"use strict\";\nvar ErrorObservable_1 = require('./ErrorObservable');\nexports._throw = ErrorObservable_1.ErrorObservable.create;\n//# sourceMappingURL=throw.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/rxjs/observable/throw.js\n ** module id = 780\n ** module chunks = 5\n **/"],"mappings":";;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC/BA;AACA;;;;;;;;;;;;ACDA;;;;;;;;;;;;ACAA;AACA;;;;;;;;;ACDA;AACA;AAOA;AAAA;AACA;AANA;AAAA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AAAA;AADA;;;;;;;;;ACRA;AAQA;AACA;AACA;AACA;AACA;AACA;AASA;AAGA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;;AAAA;AAaA;;AAAA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;AC1DA;AACA;AAKA;AAOA;AAgBA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA/GA;AAAA;AACA;AACA;AACA;AACA;;AAAA;AA4GA;;AAAA;AA3GA;;;;;;;;;;;;ACbA;;;;;;;;;;;;ACAA;;;;;;;;;ACAA;AACA;AAIA;AAOA;AAgBA;AAAA;AAAA;AAZA;AACA;AACA;AAWA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAtHA;AAAA;AACA;AACA;AACA;AACA;;AAAA;AAmHA;;AAAA;AAlHA;;;;;;;;;;;;ACZA;;;;;;;;;ACAA;AAMA;AAAA;AAEA;AANA;AAAA;AACA;AACA;AACA;;AAAA;AAGA;AAAA;AAFA;;;;;;;;;ACNA;AACA;AACA;AAGA;AACA;AACA;AAOA;AAiBA;AACA;AACA;AACA;AACA;AAbA;AACA;AA+BA;AAlBA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAhGA;AAAA;AACA;AACA;AACA;AACA;;AAAA;AA6FA;;AAAA;AA5FA;;;;;;;;;;;;ACdA;;;;;;;;;ACAA;AAKA;AAKA;AAAA;AACA;AAJA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAfA;AAAA;;;;AAAA;AAJA;AAAA;AACA;AACA;;AAAA;AAkBA;;AAAA;AAjBA;;;;;;;;;ACLA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAOA;AA4BA;AACA;AACA;AACA;AAzBA;AAIA;AACA;AAqtMA;AAAA;AACA;AACA;AACA;AACA;;AAAA;AAmMA;;AAAA;AAlMA;;;;;;;;;;;;AC/BA;;;;;;;;;ACAA;AACA;AAEA;AACA;AAQA;AAOA;AAAA;AAAA;AAiCA;AAgBA;AAhDA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AA5FA;AAAA;AACA;AACA;AACA;AACA;;AAAA;AAyFA;;AAAA;AAxFA;;;;;;;;;;;;ACZA;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;;;;;;;;;ACAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAOA;AAQA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AANA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxEA;AAAA;AACA;AACA;AACA;AACA;;AAAA;AAqEA;;AAAA;AApEA;;;;;;;;;ACjBA;AACA;AAEA;AAOA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAnBA;AAAA;AACA;AACA;AACA;AACA;;AAAA;AAgBA;;AAAA;AAfA;;;;;;;;;ACVA;AAIA;AAAA;AACA;AACA;AA4BA;AA1BA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;;;AAJA;AAMA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;;;AAAA;AA9BA;AAAA;;AAAA;AA+BA;AAAA;AA9BA;;;;;;;;;;;;ACJA;;;;;;;;;ACAA;AACA;AAGA;AAOA;AAgBA;AAAA;AAAA;AAZA;AACA;AACA;AAWA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAtHA;AAAA;AACA;AACA;AACA;AACA;;AAAA;AAmHA;;AAAA;AAlHA;;;;;;;;;ACXA;AACA;AAWA;AACA;AACA;AACA;AAYA;AAGA;AACA;AAAA;AACA;AAEA;;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3OA;AAAA;;AAAA;AA4OA;;AAAA;AA3OA;;;;;;;;;;;;AC9BA;;;;;;;;;ACGA;AAAA;AAQA;AAAA;AAAA;AARA;;;;;;;;;ACHA;AAAA;AAOA;AAAA;AAAA;AAPA;;;;;;;;;ACIA;AAAA;AAcA;AACA;AAAA;AAAA;AAfA;;;;;;;;;ACJA;AAAA;AAIA;AAAA;AAAA;AAJA;;;;;;;;;ACAA;AAAA;AAQA;;;AAGA;AACA;AACA;AAAA;AAAA;AAbA;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;;;;;;;;ACJA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjFA;AACA;AACA;AACA;;;;","sourceRoot":""}